import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

/*
@import url('https://fonts.googleapis.com/css2?family=Kanit:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

:root {
  --background-color: #0C0F14;
  --accent-color: #232630;
  --secondary-color: #181A21;
  --maestro-rank-color: #E41E26;
  --ruby-rank-color: #E41E26;
  --gold-rank-color: #FDB62F;
  --silver-rank-color: #AAAAAA;
  --bronze-rank-color: #E07826;
  --good-color: #34c759;
  --bad-color: #ff3b30;

  font-family: "Kanit", sans-serif;

  color-scheme: light dark;
  color: #FFF;
  background-color: var(--background-color);

  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

h1 {
  font-size: 72px;
  margin: 0;
  line-height: 1;
  font-weight: 500;
}

h2 {
  font-size: 40px;
  margin: 0;
  line-height: 1;
}

h3 {
  font-size: 27px;
  margin: 0;
  font-weight: 400;
}

h4 {
  font-size: 24px;
  margin: 0;
  line-height: 1;
}
*/

import './App.css'
import Store from './routes/store'
import Import from './routes/import'
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { useRef, useState } from 'react';

function App() {
  const workbookRef = useRef(null);

  const [regions, setRegions] = useState([]);
  const [stores, setStores] = useState([]);

  const [storeSelectorVisible, setVis] = useState(true);

  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Import workbookRef={workbookRef} regions={regions} setRegions={setRegions} stores={stores} setStores={setStores} visibility={storeSelectorVisible} setVis={setVis} />}/>
        <Route path="/store" element={<Store workbookRef={workbookRef} regions={regions} setRegions={setRegions} stores={stores} setStores={setStores} visibility={storeSelectorVisible} setVis={setVis} />}/>
        <Route path="*" element={<><h1 style={{ fontSize: 200, padding: 100}}>404</h1><h2 style={{ fontSize: 100, paddingLeft: 100, fontWeight: 400}}>Uh oh...<br/>Couldn't find that page.</h2></>}/>
      </Routes>
    </BrowserRouter>
  )
}

export default App

import StoreProfile from "../components/store_profile";
import Rank from "../components/rank";
import Competition from "../components/competition";
import MonthStatistics from "../components/month_statistics";

import Import from "./import";

import "./store.css";
import * as XLSX from 'xlsx';

import { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import { useNavigate } from "react-router-dom";

import rank from "../internal/internal";

function getStoreCode(workbook, name) {
    const worksheet = workbook.Sheets["Store - MTD"];
    const json = XLSX.utils.sheet_to_json(worksheet);

    for (const i in json) {
        if (json[i][2] == name) {
            return json[i][1];
        }
    }

    return "...";
}

function getCompetitionTable(workbook, region) {
    const worksheet = workbook.Sheets["Store - MTD"];
    const json = XLSX.utils.sheet_to_json(worksheet);

    var tempTable = [];

    for (const i in json) {
        if (json[i]["__EMPTY_1"] == region) {
            tempTable.push(
                { 
                    storeCode: json[i][1], 
                    store: json[i][2], 
                    nps: json[i][5],
                    pnv: json[i][6],
                    mbb: json[i][7],
                    fbb: json[i][8],
                    fwa: json[i][9],
                    prepaid: json[i][10],
                    points: null,
                    rank: null
                });
        }
    }

    for (const i in tempTable) {
        const pts = {
            nps: 0,
            pnv: 0,
            mbb: 0,
            fbb: 0,
            fwa: 0,
            prepaid: 0
        };
        for (const ii in tempTable) {
            if(tempTable[i].nps > tempTable[ii].nps){ pts.nps++ };
            if(tempTable[i].pnv > tempTable[ii].pnv){ pts.pnv++ };
            if(tempTable[i].mbb > tempTable[ii].mbb){ pts.mbb++ };
            if(tempTable[i].fbb > tempTable[ii].fbb){ pts.fbb++ };
            if(tempTable[i].fwa > tempTable[ii].fwa){ pts.fwa++ };
            if(tempTable[i].prepaid > tempTable[ii].prepaid){ pts.prepaid++ };
        }

        const scaleBy = {
            nps: 13.04347826,
            pnv: 130.4347826,
            mbb: 130.4347826,
            fbb: 130.4347826,
            fwa: 130.4347826,
            prepaid: 65.2173913
        }

        tempTable[i].points = Math.round(
            pts.nps *       (!isNaN(tempTable[i].nps) ? tempTable[i].nps : 0) *           scaleBy.nps + 
            pts.pnv *       (!isNaN(tempTable[i].pnv) ? tempTable[i].pnv : 0) *           scaleBy.pnv +
            pts.mbb *       (!isNaN(tempTable[i].mbb) ? tempTable[i].mbb : 0) *           scaleBy.mbb +
            pts.fbb *       (!isNaN(tempTable[i].fbb) ? tempTable[i].fbb : 0) *           scaleBy.fbb + 
            pts.fwa *       (!isNaN(tempTable[i].fwa) ? tempTable[i].fwa : 0) *           scaleBy.fwa +
            pts.prepaid *   (!isNaN(tempTable[i].prepaid) ? tempTable[i].prepaid : 0) *   scaleBy.prepaid);
        
    }

    tempTable.sort((a,b) => b.points - a.points).forEach((store, index) => {
        store.rank = index + 1;
    })

    return tempTable;
}

function getRankProfile(compTable, storeCode) {
    for(const i in compTable) {
        if(compTable[i].storeCode == storeCode) {
            return {rank: rank(compTable[i].rank, compTable.length), points: compTable[i].points};
        }
    }
    return {rank: "...", points: 0};
}

function getAchievements(workbook, storeCode) {
    const worksheet = workbook.Sheets["Store - MTD"];
    const json = XLSX.utils.sheet_to_json(worksheet);

    for (const i in json) {
        if (json[i][1] == storeCode) {
            return {
                "All Connections": {
                  "PNV": [Math.round(json[i][25]), Math.round(json[i][26])],
                  "MBB": [Math.round(json[i][41]), Math.round(json[i][42])],
                  "FWA": [Math.round(json[i][55]), Math.round(json[i][56])],
                  "FBB": [Math.round(json[i][69]), Math.round(json[i][70])],
                  "ACQ": [Math.round(json[i][83]), Math.round(json[i][84])]
                }
            };
        }
    }
}

export default function Store({workbookRef, regions, setRegions, stores, setStores, visibility, setVis}) {
    const location = useLocation();
    const navigate = useNavigate();

    const [urlParams, setParams] = useState({});

    const [storeCode, setStoreCode] = useState("...");
    const [competitionTable, setTable] = useState([]);
    const [rankProfile, setRankProfile] = useState({
        rank: "...",
        points: 0
    });

    const [achievements, setAchievements] = useState({
        "All Connections": {
          "PNV": [0, 0],
          "MBB": [0, 0],
          "FWA": [0, 0],
          "FBB": [0, 0],
          "ACQ": [0, 0]
        }
    });

    useEffect(() => {
        if(!workbookRef.current) {
            navigate('/');
            return;
        }

        console.log(workbookRef.current)

        const queryParams = new URLSearchParams(location.search);
        const newParams = Object.fromEntries(queryParams.entries());
        setParams(newParams);

        document.title = `RM Tracker - ${newParams.store}`;

        const storeCode = getStoreCode(workbookRef.current, newParams.store);
        const compTable = getCompetitionTable(workbookRef.current, newParams.region);

        setStoreCode(storeCode);
        setTable(compTable);

        setRankProfile(getRankProfile(compTable, storeCode));

        setAchievements(getAchievements(workbookRef.current, storeCode));

    }, [location.search]);

    var storeProfile = {
        region: urlParams.region,
        code: storeCode,
        name: urlParams.store
    };

    return (
        <>
        <div className={`store-root ${visibility ? 'out' : ''}`}>
            <StoreProfile storeProfile={storeProfile} setVis={setVis} />
            <span className="main-flex">
                <Rank rank={rankProfile} />
                <span className="not-rank">
                    <MonthStatistics monthStatistics={achievements} />
                    <Competition regionTable={competitionTable} />
                </span>
            </span>
        </div>
        <Import workbookRef={workbookRef} regions={regions} setRegions={setRegions} stores={stores} setStores={setStores} visibility={visibility} setVis={setVis} />
        </>
    );
}

/*
Mobile
.store-root {
    width: calc(100% - 40px);
    padding: 20px;
    margin: 0;
}

.out {
    opacity: 50%;
    pointer-events: none;
}

.main-flex {
    display: block;
}

Small Desktop
@media (min-width: 1200px) {
    .store-root {
        margin: 0 auto;
    }
    .main-flex {
        display: flex;
        gap: 20px;
        align-items: flex-start;
    }
    .not-rank {
        width: 100%;
    }
}

Desktop
@media (min-width: 1600px) {
    .store-root {
        max-width: 1520px;
    }
}
*/

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import * as XLSX from 'xlsx';

import "./import.css"

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faFileImport } from '@fortawesome/free-solid-svg-icons';

import Cookies from 'js-cookie';

export default function Import({workbookRef, regions, setRegions, stores, setStores, visibility, setVis}) {
    const navigate = useNavigate();

    const [isDragging, setIsDragging] = useState(false);
    
    const [formRegion, setRegion] = useState('-');
    const [formStore, setStore] = useState('-');
    const [formSave, setSave] = useState(false);

    const handleFile = (file) => {
        if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
            alert('Wrong file type, must be a .xlsx file');
            return false;
        }

        const reader = new FileReader();

        reader.onload = (e) => {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, {type: 'array'});
            const worksheet = workbook.Sheets["PD - Regions"];
            const json = XLSX.utils.sheet_to_json(worksheet);

            if([data, workbook, worksheet, json].includes(undefined)) {
                alert(`Malformed .xlsx file, make sure you're importing an RM Report`);
                return false;
            }

            var regionsTemp = [];

            for (const i in json) {
                if(json[i]["__EMPTY"]) {
                    regionsTemp.push(json[i]["__EMPTY"].toUpperCase());
                }
            }

            setRegions([...new Set(regionsTemp)].filter(item => item !== 'REGIONS' && item !== 'NATIONAL TOTAL'));

            workbookRef.current = workbook;

            if (formStore != '-') {
                handle.regionChange({target: {value: formRegion}});
            }
        }

        reader.readAsArrayBuffer(file);
    }

    const handle = {
        drop: (event) => {
            event.preventDefault();
            event.stopPropagation();
            const files = event.dataTransfer.files;
            setIsDragging(false);
            if (files.length > 0) {
              handleFile(files[0]);
            }
        },
        dragOver: (event) => {
            event.preventDefault();
            event.stopPropagation();
            setIsDragging(true);
        },
        dragLeave: (event) => {
            event.preventDefault();
            event.stopPropagation();
            setIsDragging(false);
        },
        fileChange: (event) => {
            event.preventDefault();
            const files = event.target.files;
            if (files.length > 0) {
              handleFile(files[0]);
            }
        },
        uploadClick: () => {
            document.getElementById('fileInput').click();
        },
        regionChange: (event) => {
            const region = event.target.value;

            setRegion(region);

            if (workbookRef.current === null) {
                alert('Something went wrong, try refreshing and try again...');
            }

            const worksheet = workbookRef.current.Sheets["Store - MTD"];
            const json = XLSX.utils.sheet_to_json(worksheet);
            var stores = [];

            for (const i in json) {
                if(json[i]["__EMPTY_1"] !== region) {
                    continue;
                }
                
                stores.push(json[i][2]);
            }

            setStores(stores);

            setStore(formStore == "-" ? stores[0] : formStore);
        },
        storeChange: (event) => {
            setStore(event.target.value);
        },
        saveChange: (event) => {
            setSave(event.target.checked);
        }
    }

    function submit(event) {
        event.preventDefault();
        if (!regions.includes(formRegion)) {
            alert('Please select a valid region');
            return;
        }
        if (!stores.includes(formStore)) {
            alert('Please select a valid store');
            return;
        }

        const queryString = new URLSearchParams({region: formRegion, store: formStore}).toString();

        setVis(false);

        if (formSave) {
            Cookies.set('defaultRegion', formRegion);
            Cookies.set('defaultStore', formStore);
        }

        navigate(`/store?${queryString}`);
    }

    useEffect(() => {
        const savedRegion = Cookies.get('defaultRegion');
        const savedStore = Cookies.get('defaultStore');

        if (savedRegion && savedStore) {
            setRegion(savedRegion);
            setStore(savedStore);
        }

        const queryParams = new URLSearchParams(location.search);
        const newParams = Object.fromEntries(queryParams.entries());

        if (newParams.region && newParams.store) {
            setRegion(newParams.region);
            setStore(newParams.store);
        }
    }, [location.search]);

    return (
        <div className={`import-root ${visibility ? '' : 'off-screen'}`} style={regions.length !== 0 ? {width: 440} : {width: 620}}>
            <div className="onboard">
                <h1>RM</h1>
                <h2>tracker</h2>
                <p>See how your store is performing against others in your region</p>
            </div>
            <div className={`import-area ${isDragging ? 'dragging' : ''}`} style={regions.length !== 0 ? {display: 'none'} : {display: 'flex'}} onDrop={handle.drop} onDragOver={handle.dragOver} onDragLeave={handle.dragLeave} onClick={handle.uploadClick}>
                <input type="file" id="fileInput" style={{ display: 'none' }} onChange={handle.fileChange} />
                <p>Drag and drop or click to import<br/>an RM Report</p>
                <FontAwesomeIcon className="import-icon" icon={faFileImport} />
                <p>All files are processed locally and are not shared to external sources</p>
            </div>
            <div className="store-selector" style={regions.length !== 0 ? {display: 'block'} : {display: 'none'}}>
                <form onSubmit={submit}>
                    <span>
                        <label>Region</label>
                        <select value={formRegion} name="region" id="region" onChange={handle.regionChange}>
                        <option value='-'>-</option>
                            {
                                regions.map((region, key) => (
                                    <option key={key} value={region}>{region}</option>
                                ))
                            }
                        </select>
                        <label>Store</label>
                        <select value={formStore} name="store" id="store" onChange={handle.storeChange}>
                            {
                                stores.map((store, key) => (
                                    <option key={key} value={store}>{store}</option>
                                ))
                            }
                        </select>
                    </span>
                    <span>
                        <label style={{color: "#FFFFFF", cursor: "pointer", marginBottom: 5}}>
                            <input type="checkbox" id="checkbox" checked={formSave} onChange={handle.saveChange} />
                            Save Selection
                        </label>
                        <input type="submit" value="See Stats" />
                    </span>
                </form>
            </div>
        </div>
    );
}

/*
.import-root {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) translate(0, 0vh);
    background-color: var(--secondary-color);
    border: 1px solid var(--accent-color);
    box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.5);
    border-radius: 16px;
    display: flex;
    align-items: stretch;
    transition: all 0.2s ease-in-out;
    opacity: 100%;
}

.off-screen {
    opacity: 0%;
    pointer-events: none;
}

.import-root .onboard {
    flex: 1;
    padding: 20px;
    border-radius: 16px 0 0 16px;
    background-color: var(--accent-color);
}

.import-root .onboard p {
    flex: 0 1 auto;
}

.import-root .import-area {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 350px;
    height: 350px;
    margin: 20px;
    background-color: #B3B3B30D;
    border-radius: 12px;
    cursor: pointer;
}

.dragging {
    background-color: #B3B3B31A !important;
}

.import-area::before {
    content: "";
    position: absolute;
    width: 350px;
    height: 350px;
    transform: translate(-3px, -3px);
    border: 3px solid #B3B3B3A0;
    border-radius: inherit;
    pointer-events: none;
    mask-image: linear-gradient(90deg, black 25px, transparent 25px);
    mask-size: 50px 100%;
    mask-position: 12.5px;
}

.import-area::after {
    content: "";
    position: absolute;
    width: 350px;
    height: 350px;
    transform: translate(-3px, -3px) rotate(90deg);
    border: 3px solid #B3B3B3A0;
    border-radius: inherit;
    pointer-events: none;
    mask-image: linear-gradient(90deg, black 25px, transparent 25px);
    mask-size: 50px 100%;
    mask-position: 12.5px;
}

.import-root .import-area p {
    flex: 0 1 auto;
    color: #B3B3B3;
    text-align: center;
    margin: 20px;
}

.import-icon {
    height: 50px;
    color: #B3B3B3A0;
}

.import-root .onboard h1 {
    font-size: 96px;
    font-weight: 400;
}

.import-root .onboard h2 {
    font-size: 48px;
    padding-bottom: 20px;
    border-bottom: 3px solid #B3B3B3A0;
    font-weight: 400;
}

.store-selector > form {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 350px;
    width: 210px;
}

.store-selector > form > * {
    margin: 20px;
}

.store-selector > form > span {
    display: flex;
    flex-direction: column;
}

.store-selector > form > span > label {
    padding-left: 5px;
    color: #656669;
}

.store-selector input, .store-selector select {
    border-radius: 8px;
    font-size: 16px;
    font-family: "Kanit", sans-serif;
    font-weight: 400;
    padding: 2px;
    cursor: pointer;
}

.store-selector input[type="checkbox"] {
    margin-left: -2px;
    margin-right: 4px;
}

.store-selector input {
    border: 1px solid #000000;
    color: #000000;
    background-color: #FFFFFF;
}

.store-selector select {
    border: 1px solid #656669;
    color: #FFFFFF;
    background-color: var(--accent-color);
}
*/

export default function rank(placement, total) {
    switch(placement) {
        case 1:
            return "MAESTRO I";
        case 2:
            return "MAESTRO II";
        case 3:
            return "MAESTRO III";
    }
    if((placement - 3) <= ((total - 3) / 4 * 1)) {
        return "RUBY";
    }
    else if((placement - 3) <= ((total - 3) / 4 * 2)) {
        return "GOLD";
    }
    else if((placement - 3) <= ((total - 3) / 4 * 3)) {
        return "SILVER";
    }
    else if((placement - 3) <= ((total - 3) / 4 * 4)) {
        return "BRONZE";
    }
}

import "./store_profile.css"

export default function StoreProfile({storeProfile, setVis}) {

    function onClickHandler(event) {
        setVis(true);
    }

    return (
        <div className="store-profile" onClick={onClickHandler}>
            <h1>{storeProfile.region}</h1>
            <span className="store-location">
                <h2>{storeProfile.code}</h2>
                <h4>{storeProfile.name}</h4>
            </span>
        </div>
    );
}

/*
.store-profile {
    width: calc(100% - 40px);
    margin: 20px;
    background-color: var(--secondary-color);
    border: 1px solid var(--accent-color);
    box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.5);
    border-radius: 16px;
    display: flex;
    flex-direction: row;
    align-items: center;
    cursor: pointer;
}

.store-profile:hover {
    background-color: var(--accent-color);
}

.store-location {
    margin: 20px;
    display: flex;
    flex-direction: column;
    align-items: right;
    justify-content: center;
}

.store-profile h1 {
    margin: 20px;
}

.store-profile h2 {
    font-weight: 500;
    margin-bottom: 15px;
}

.store-profile h4 {
    font-weight: 400;
}
    */

import "./rank.css"
import React, { useState } from "react";

import MeastroISVG from "../assets/ranks/Maestro_rank_I.svg";
import MeastroIISVG from "../assets/ranks/Maestro_rank_II.svg";
import MeastroIIISVG from "../assets/ranks/Maestro_rank_III.svg";
import RubySVG from "../assets/ranks/Ruby_rank.svg";
import GoldSVG from "../assets/ranks/Gold_rank.svg";
import SilverSVG from "../assets/ranks/Silver_rank.svg";
import BronzeSVG from "../assets/ranks/Bronze_rank.svg";

export default function Rank({rank}) {
    const rankColor = {
        "MAESTRO I": "#E41E26",
        "MAESTRO II": "#E41E26",
        "MAESTRO III": "#E41E26",
        "RUBY": "#E41E26",
        "GOLD": "#FDB630",
        "SILVER": "#AAAAAA",
        "BRONZE": "#E07826"
    }

    const rankSVG = {
        "MAESTRO I": MeastroISVG,
        "MAESTRO II": MeastroIISVG,
        "MAESTRO III": MeastroIIISVG,
        "RUBY": RubySVG,
        "GOLD": GoldSVG,
        "SILVER": SilverSVG,
        "BRONZE": BronzeSVG
    }

    return (
        <div className="rank">
            <h3>CURRENT MONTH</h3>
            <span>
                <img src={rankSVG[rank.rank]} alt={rank.rank} />
                <span className="rank-info">
                    <h2 className="rank text" style={{color: rankColor[rank.rank], textShadow: ["MAESTRO I", "MAESTRO II", "MAESTRO III"].includes(rank.rank) ? '0 0 15px #E41E26' : 'none'}}>{rank.rank}</h2>
                    <h3 className="rank text">POINTS</h3>
                    <h1 className="rank text">{rank.points.toLocaleString('en-US')}</h1>
                </span>
            </span>
        </div>
    );
}

/*
div.rank {
    width: calc(100% - 40px);
    margin: 20px;
    background-color: var(--accent-color);
    border: 1px solid var(--accent-color);
    box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.5);
    border-radius: 16px;
    align-items: center;
}

div.rank h1 {
    margin-top: -10px;
    margin-bottom: 10px;
}

div.rank h3 {
    line-height: 1;
    margin: 15.25px;
}

div.rank span {
    display: flex;
    align-items: center;
    justify-content: center;
}

div.rank span.rank-info {
    display: block;
}

.rank.text {
    font-weight: 600;
    margin-right: 20px;
}

h2.rank.text {
    font-size: 30px;
}

h3.rank.text {
    font-size: 24px;
    margin: 0;
    margin-top: 10px;
}

div.rank img {
    height: 180px;
}

Desktop
@media (min-width: 1200px) {
    div.rank {
        width: 400px;
        margin-top: 0;
        margin-right: 0;
    }
}*/

import "./month_statistics.css"

export default function MonthStatistics({monthStatistics}) {

    return (
        <div className="month-statistics">
            <h3>MONTH ACHIEVEMENTS</h3>
            <span>All Connections</span>
            <ul>
                {
                    Object.keys(monthStatistics["All Connections"]).map(key => (
                        <li key={key}>
                            {key}<br/>
                            <strong>{monthStatistics["All Connections"][key][0]}</strong>
                            <strong>{monthStatistics["All Connections"][key][1]}</strong>
                            <strong>{Math.round(monthStatistics["All Connections"][key][0] / monthStatistics["All Connections"][key][1] * 1000) / 10}%</strong>
                        </li>
                    ))
                }
            </ul>
        </div>
    );
}

/*
div.month-statistics {
    width: calc(100% - 40px);
    margin: 20px;
    margin-top: 0;
    background-color: var(--secondary-color);
    border: 1px solid var(--accent-color);
    box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.5);
    border-radius: 16px;
    align-items: center;
}

.month-statistics h3 {
    line-height: 1;
    margin: 15.25px;
}

.month-statistics span {
    display: block;
    font-size: 24px;
    padding: 5px 15.25px;
    width: calc(100% - 30.5px);
    background-color: var(--accent-color);
}

ul {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    list-style-type: none;
    padding-left: 30px;
}

ul li {
    display: inline-block;
    color: #8B939A;
    font-weight: 500;
    line-height: 1;
    padding-right: 50px;
    padding-bottom: 10px;
    border-radius: 16px;
}

ul li strong:first-of-type {
    color: #FFFFFF;
    font-size: 27px;
    font-weight: 500;
}

ul li strong:nth-of-type(2) {
    position: relative;
    top: 10px;
    color: #8B939A;
    font-size: 27px;
    font-weight: 500;
    margin-left: 10px;
}

ul li strong:nth-of-type(2)::before {
    content: "/";
    position: relative;
    top: -5px;
    left: -5px;
}

ul li strong:nth-of-type(3) {
    position: absolute;
    color: #FFFFFF;
    font-size: 17px;
    font-weight: 500;
    transform: translate(-18px, -50%);
}

Desktop
@media (min-width: 1200px) {
    div.month-statistics {
        width: calc(100% - 20px);
        margin-left: 0;
        margin-right: 0;
    }
}
*/

import "./competition.css"
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-quartz.css';

import rank from "../internal/internal";

export default function Competition({regionTable}) {
    const cellClassRule = {
        'above-target': params => parseFloat(params.value) > 1.00,
        'almost-target': params => (parseFloat(params.value) >= 0.90 && parseFloat(params.value) <= 1.00)
    }

    const columnDefs = [
        { headerName: 'Store Code', field: 'storeCode', width: 120, pinned: 'left'},
        { headerName: 'Store', field: 'store', width: 300 },
        { headerName: 'Rank', field: 'rank', width: 120, valueFormatter: params => rank(params.value, regionTable.length)},
        { headerName: 'NPS', field: 'nps', width: 100, cellClassRules: cellClassRule, valueFormatter: params => `${Math.round(params.value * 10000) / 100}%` },
        { headerName: 'PNV', field: 'pnv', width: 100, cellClassRules: cellClassRule, valueFormatter: params => `${Math.round(params.value * 10000) / 100}%` },
        { headerName: 'MBB', field: 'mbb', width: 100, cellClassRules: cellClassRule, valueFormatter: params => `${Math.round(params.value * 10000) / 100}%` },
        { headerName: 'FBB', field: 'fbb', width: 100, cellClassRules: cellClassRule, valueFormatter: params => `${Math.round(params.value * 10000) / 100}%` },
        { headerName: 'FWA', field: 'fwa', width: 100, cellClassRules: cellClassRule, valueFormatter: params => `${Math.round(params.value * 10000) / 100}%` },
        { headerName: 'Prepaid', field: 'prepaid', width: 100, cellClassRules: cellClassRule, valueFormatter: params => `${Math.round(params.value * 10000) / 100}%` },
        { headerName: 'Points', field: 'points', width: 100}
    ];
    
    return (
    <div className="ag-theme-rm-tracker ag-theme-quartz-dark" style={{ height: 400 }}>
        <AgGridReact
            rowData={regionTable}
            columnDefs={columnDefs}>
        </AgGridReact>
    </div>
    );
}

/*
div.ag-theme-rm-tracker.ag-theme-quartz-dark {
    width: calc(100% - 40px);
    box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.5);
    margin: 20px;
    border-radius: 16px;
}

.ag-theme-rm-tracker {
    --ag-active-color: var(--accent-color) !important;
    --ag-background-color: var(--background-color) !important;
    --ag-header-background-color: var(--secondary-color) !important;
    --ag-font-family: "Kanit", sans-serif !important;
    --ag-font-size: 16px !important;
    --ag-wrapper-border-radius: 12px !important;
}

.above-target {
    background-color: #c6efce10;
    color: #c6efce !important;
}
  
.almost-target {
    background-color: #ffeb9c10;
    color: #ffeb9c !important;
}

Desktop
@media (min-width: 1200px) {
    div.ag-theme-rm-tracker.ag-theme-quartz-dark {
        width: calc(100% - 20px);
        margin: 0;
    }
}
    */
   